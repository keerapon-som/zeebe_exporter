// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: internal/server/schema.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordMetadata_ValueType int32

const (
	RecordMetadata_UNKNOWN_VALUE_TYPE               RecordMetadata_ValueType = 0
	RecordMetadata_JOB                              RecordMetadata_ValueType = 1
	RecordMetadata_DEPLOYMENT                       RecordMetadata_ValueType = 2
	RecordMetadata_PROCESS_INSTANCE                 RecordMetadata_ValueType = 3
	RecordMetadata_INCIDENT                         RecordMetadata_ValueType = 4
	RecordMetadata_MESSAGE                          RecordMetadata_ValueType = 5
	RecordMetadata_MESSAGE_SUBSCRIPTION             RecordMetadata_ValueType = 6
	RecordMetadata_PROCESS_MESSAGE_SUBSCRIPTION     RecordMetadata_ValueType = 7
	RecordMetadata_JOB_BATCH                        RecordMetadata_ValueType = 8
	RecordMetadata_TIMER                            RecordMetadata_ValueType = 9
	RecordMetadata_MESSAGE_START_EVENT_SUBSCRIPTION RecordMetadata_ValueType = 10
	RecordMetadata_VARIABLE                         RecordMetadata_ValueType = 11
	RecordMetadata_VARIABLE_DOCUMENT                RecordMetadata_ValueType = 12
	RecordMetadata_PROCESS_INSTANCE_CREATION        RecordMetadata_ValueType = 13
	RecordMetadata_ERROR                            RecordMetadata_ValueType = 14
	RecordMetadata_PROCESS                          RecordMetadata_ValueType = 15
	RecordMetadata_DEPLOYMENT_DISTRIBUTION          RecordMetadata_ValueType = 16
	RecordMetadata_PROCESS_EVENT                    RecordMetadata_ValueType = 17
	RecordMetadata_DECISION                         RecordMetadata_ValueType = 18
	RecordMetadata_DECISION_REQUIREMENTS            RecordMetadata_ValueType = 19
	RecordMetadata_DECISION_EVALUATION              RecordMetadata_ValueType = 20
	RecordMetadata_PROCESS_INSTANCE_MODIFICATION    RecordMetadata_ValueType = 21
	RecordMetadata_CHECKPOINT                       RecordMetadata_ValueType = 22
	RecordMetadata_ESCALATION                       RecordMetadata_ValueType = 23
	RecordMetadata_SIGNAL_SUBSCRIPTION              RecordMetadata_ValueType = 24
	RecordMetadata_SIGNAL                           RecordMetadata_ValueType = 25
	RecordMetadata_RESOURCE_DELETION                RecordMetadata_ValueType = 26
	RecordMetadata_COMMAND_DISTRIBUTION             RecordMetadata_ValueType = 27
	RecordMetadata_USER_TASK                        RecordMetadata_ValueType = 28
	RecordMetadata_PROCESS_INSTANCE_MIGRATION       RecordMetadata_ValueType = 29
	RecordMetadata_COMPENSATION_SUBSCRIPTION        RecordMetadata_ValueType = 30
	RecordMetadata_PROCESS_INSTANCE_RESULT          RecordMetadata_ValueType = 31
	RecordMetadata_PROCESS_INSTANCE_BATCH           RecordMetadata_ValueType = 32
	RecordMetadata_MESSAGE_BATCH                    RecordMetadata_ValueType = 33
	RecordMetadata_FORM                             RecordMetadata_ValueType = 34
)

// Enum value maps for RecordMetadata_ValueType.
var (
	RecordMetadata_ValueType_name = map[int32]string{
		0:  "UNKNOWN_VALUE_TYPE",
		1:  "JOB",
		2:  "DEPLOYMENT",
		3:  "PROCESS_INSTANCE",
		4:  "INCIDENT",
		5:  "MESSAGE",
		6:  "MESSAGE_SUBSCRIPTION",
		7:  "PROCESS_MESSAGE_SUBSCRIPTION",
		8:  "JOB_BATCH",
		9:  "TIMER",
		10: "MESSAGE_START_EVENT_SUBSCRIPTION",
		11: "VARIABLE",
		12: "VARIABLE_DOCUMENT",
		13: "PROCESS_INSTANCE_CREATION",
		14: "ERROR",
		15: "PROCESS",
		16: "DEPLOYMENT_DISTRIBUTION",
		17: "PROCESS_EVENT",
		18: "DECISION",
		19: "DECISION_REQUIREMENTS",
		20: "DECISION_EVALUATION",
		21: "PROCESS_INSTANCE_MODIFICATION",
		22: "CHECKPOINT",
		23: "ESCALATION",
		24: "SIGNAL_SUBSCRIPTION",
		25: "SIGNAL",
		26: "RESOURCE_DELETION",
		27: "COMMAND_DISTRIBUTION",
		28: "USER_TASK",
		29: "PROCESS_INSTANCE_MIGRATION",
		30: "COMPENSATION_SUBSCRIPTION",
		31: "PROCESS_INSTANCE_RESULT",
		32: "PROCESS_INSTANCE_BATCH",
		33: "MESSAGE_BATCH",
		34: "FORM",
	}
	RecordMetadata_ValueType_value = map[string]int32{
		"UNKNOWN_VALUE_TYPE":               0,
		"JOB":                              1,
		"DEPLOYMENT":                       2,
		"PROCESS_INSTANCE":                 3,
		"INCIDENT":                         4,
		"MESSAGE":                          5,
		"MESSAGE_SUBSCRIPTION":             6,
		"PROCESS_MESSAGE_SUBSCRIPTION":     7,
		"JOB_BATCH":                        8,
		"TIMER":                            9,
		"MESSAGE_START_EVENT_SUBSCRIPTION": 10,
		"VARIABLE":                         11,
		"VARIABLE_DOCUMENT":                12,
		"PROCESS_INSTANCE_CREATION":        13,
		"ERROR":                            14,
		"PROCESS":                          15,
		"DEPLOYMENT_DISTRIBUTION":          16,
		"PROCESS_EVENT":                    17,
		"DECISION":                         18,
		"DECISION_REQUIREMENTS":            19,
		"DECISION_EVALUATION":              20,
		"PROCESS_INSTANCE_MODIFICATION":    21,
		"CHECKPOINT":                       22,
		"ESCALATION":                       23,
		"SIGNAL_SUBSCRIPTION":              24,
		"SIGNAL":                           25,
		"RESOURCE_DELETION":                26,
		"COMMAND_DISTRIBUTION":             27,
		"USER_TASK":                        28,
		"PROCESS_INSTANCE_MIGRATION":       29,
		"COMPENSATION_SUBSCRIPTION":        30,
		"PROCESS_INSTANCE_RESULT":          31,
		"PROCESS_INSTANCE_BATCH":           32,
		"MESSAGE_BATCH":                    33,
		"FORM":                             34,
	}
)

func (x RecordMetadata_ValueType) Enum() *RecordMetadata_ValueType {
	p := new(RecordMetadata_ValueType)
	*p = x
	return p
}

func (x RecordMetadata_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordMetadata_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_schema_proto_enumTypes[0].Descriptor()
}

func (RecordMetadata_ValueType) Type() protoreflect.EnumType {
	return &file_internal_server_schema_proto_enumTypes[0]
}

func (x RecordMetadata_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordMetadata_ValueType.Descriptor instead.
func (RecordMetadata_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{2, 0}
}

type RecordMetadata_RecordType int32

const (
	RecordMetadata_UNKNOWN_RECORD_TYPE RecordMetadata_RecordType = 0
	RecordMetadata_EVENT               RecordMetadata_RecordType = 1
	RecordMetadata_COMMAND             RecordMetadata_RecordType = 2
	RecordMetadata_COMMAND_REJECTION   RecordMetadata_RecordType = 3
)

// Enum value maps for RecordMetadata_RecordType.
var (
	RecordMetadata_RecordType_name = map[int32]string{
		0: "UNKNOWN_RECORD_TYPE",
		1: "EVENT",
		2: "COMMAND",
		3: "COMMAND_REJECTION",
	}
	RecordMetadata_RecordType_value = map[string]int32{
		"UNKNOWN_RECORD_TYPE": 0,
		"EVENT":               1,
		"COMMAND":             2,
		"COMMAND_REJECTION":   3,
	}
)

func (x RecordMetadata_RecordType) Enum() *RecordMetadata_RecordType {
	p := new(RecordMetadata_RecordType)
	*p = x
	return p
}

func (x RecordMetadata_RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordMetadata_RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_schema_proto_enumTypes[1].Descriptor()
}

func (RecordMetadata_RecordType) Type() protoreflect.EnumType {
	return &file_internal_server_schema_proto_enumTypes[1]
}

func (x RecordMetadata_RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordMetadata_RecordType.Descriptor instead.
func (RecordMetadata_RecordType) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{2, 1}
}

type VariableDocumentRecord_UpdateSemantics int32

const (
	VariableDocumentRecord_UNKNOWN_UPDATE_SEMANTICS VariableDocumentRecord_UpdateSemantics = 0
	VariableDocumentRecord_LOCAL                    VariableDocumentRecord_UpdateSemantics = 1
	VariableDocumentRecord_PROPAGATE                VariableDocumentRecord_UpdateSemantics = 2
)

// Enum value maps for VariableDocumentRecord_UpdateSemantics.
var (
	VariableDocumentRecord_UpdateSemantics_name = map[int32]string{
		0: "UNKNOWN_UPDATE_SEMANTICS",
		1: "LOCAL",
		2: "PROPAGATE",
	}
	VariableDocumentRecord_UpdateSemantics_value = map[string]int32{
		"UNKNOWN_UPDATE_SEMANTICS": 0,
		"LOCAL":                    1,
		"PROPAGATE":                2,
	}
)

func (x VariableDocumentRecord_UpdateSemantics) Enum() *VariableDocumentRecord_UpdateSemantics {
	p := new(VariableDocumentRecord_UpdateSemantics)
	*p = x
	return p
}

func (x VariableDocumentRecord_UpdateSemantics) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableDocumentRecord_UpdateSemantics) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_server_schema_proto_enumTypes[2].Descriptor()
}

func (VariableDocumentRecord_UpdateSemantics) Type() protoreflect.EnumType {
	return &file_internal_server_schema_proto_enumTypes[2]
}

func (x VariableDocumentRecord_UpdateSemantics) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableDocumentRecord_UpdateSemantics.Descriptor instead.
func (VariableDocumentRecord_UpdateSemantics) EnumDescriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{14, 0}
}

// Convenience message for systems which use a key/id system for each record
type RecordId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId int32 `protobuf:"varint,1,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Position    int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *RecordId) Reset() {
	*x = RecordId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordId) ProtoMessage() {}

func (x *RecordId) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordId.ProtoReflect.Descriptor instead.
func (*RecordId) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{0}
}

func (x *RecordId) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *RecordId) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Convenience message for packing any kind of record
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record *anypb.Any `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Record) GetRecord() *anypb.Any {
	if x != nil {
		return x.Record
	}
	return nil
}

// Packs all non-value info into a single field; the idea here is so we can embed the *Record messages into other
// messages (e.g. JobRecord and JobBatchRecord) by simply omitting the optional metadata field, but by setting it the
// message becomes a full fledged record. Also cuts down how much properties need to be duplicated if we want to have
// flat records.
type RecordMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId          int32                     `protobuf:"varint,1,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Position             int64                     `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Key                  int64                     `protobuf:"varint,3,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp            int64                     `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RecordType           RecordMetadata_RecordType `protobuf:"varint,5,opt,name=recordType,proto3,enum=exporter_protocol.RecordMetadata_RecordType" json:"recordType,omitempty"`
	Intent               string                    `protobuf:"bytes,6,opt,name=intent,proto3" json:"intent,omitempty"`
	ValueType            RecordMetadata_ValueType  `protobuf:"varint,7,opt,name=valueType,proto3,enum=exporter_protocol.RecordMetadata_ValueType" json:"valueType,omitempty"`
	SourceRecordPosition int64                     `protobuf:"varint,8,opt,name=sourceRecordPosition,proto3" json:"sourceRecordPosition,omitempty"`
	RejectionType        string                    `protobuf:"bytes,9,opt,name=rejectionType,proto3" json:"rejectionType,omitempty"`
	RejectionReason      string                    `protobuf:"bytes,10,opt,name=rejectionReason,proto3" json:"rejectionReason,omitempty"`
}

func (x *RecordMetadata) Reset() {
	*x = RecordMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetadata) ProtoMessage() {}

func (x *RecordMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMetadata.ProtoReflect.Descriptor instead.
func (*RecordMetadata) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{2}
}

func (x *RecordMetadata) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *RecordMetadata) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *RecordMetadata) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *RecordMetadata) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RecordMetadata) GetRecordType() RecordMetadata_RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordMetadata_UNKNOWN_RECORD_TYPE
}

func (x *RecordMetadata) GetIntent() string {
	if x != nil {
		return x.Intent
	}
	return ""
}

func (x *RecordMetadata) GetValueType() RecordMetadata_ValueType {
	if x != nil {
		return x.ValueType
	}
	return RecordMetadata_UNKNOWN_VALUE_TYPE
}

func (x *RecordMetadata) GetSourceRecordPosition() int64 {
	if x != nil {
		return x.SourceRecordPosition
	}
	return 0
}

func (x *RecordMetadata) GetRejectionType() string {
	if x != nil {
		return x.RejectionType
	}
	return ""
}

func (x *RecordMetadata) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

type DeploymentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                     *RecordMetadata                      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Resources                    []*DeploymentRecord_Resource         `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	ProcessMetadata              []*DeploymentRecord_ProcessMetadata  `protobuf:"bytes,3,rep,name=processMetadata,proto3" json:"processMetadata,omitempty"`
	DecisionRequirementsMetadata []*DecisionRequirementsMetadata      `protobuf:"bytes,4,rep,name=decisionRequirementsMetadata,proto3" json:"decisionRequirementsMetadata,omitempty"`
	DecisionMetadata             []*DeploymentRecord_DecisionMetadata `protobuf:"bytes,5,rep,name=decisionMetadata,proto3" json:"decisionMetadata,omitempty"`
	TenantId                     string                               `protobuf:"bytes,6,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	FormMetadata                 []*DeploymentRecord_FormMetadata     `protobuf:"bytes,7,rep,name=formMetadata,proto3" json:"formMetadata,omitempty"`
}

func (x *DeploymentRecord) Reset() {
	*x = DeploymentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRecord) ProtoMessage() {}

func (x *DeploymentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRecord.ProtoReflect.Descriptor instead.
func (*DeploymentRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{3}
}

func (x *DeploymentRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeploymentRecord) GetResources() []*DeploymentRecord_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *DeploymentRecord) GetProcessMetadata() []*DeploymentRecord_ProcessMetadata {
	if x != nil {
		return x.ProcessMetadata
	}
	return nil
}

func (x *DeploymentRecord) GetDecisionRequirementsMetadata() []*DecisionRequirementsMetadata {
	if x != nil {
		return x.DecisionRequirementsMetadata
	}
	return nil
}

func (x *DeploymentRecord) GetDecisionMetadata() []*DeploymentRecord_DecisionMetadata {
	if x != nil {
		return x.DecisionMetadata
	}
	return nil
}

func (x *DeploymentRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeploymentRecord) GetFormMetadata() []*DeploymentRecord_FormMetadata {
	if x != nil {
		return x.FormMetadata
	}
	return nil
}

type DeploymentDistributionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PartitionId int32           `protobuf:"varint,2,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *DeploymentDistributionRecord) Reset() {
	*x = DeploymentDistributionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentDistributionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentDistributionRecord) ProtoMessage() {}

func (x *DeploymentDistributionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentDistributionRecord.ProtoReflect.Descriptor instead.
func (*DeploymentDistributionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{4}
}

func (x *DeploymentDistributionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeploymentDistributionRecord) GetPartitionId() int32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

type ErrorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ExceptionMessage   string          `protobuf:"bytes,2,opt,name=exceptionMessage,proto3" json:"exceptionMessage,omitempty"`
	Stacktrace         string          `protobuf:"bytes,3,opt,name=stacktrace,proto3" json:"stacktrace,omitempty"`
	ErrorEventPosition int64           `protobuf:"varint,4,opt,name=errorEventPosition,proto3" json:"errorEventPosition,omitempty"`
	ProcessInstanceKey int64           `protobuf:"varint,5,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
}

func (x *ErrorRecord) Reset() {
	*x = ErrorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorRecord) ProtoMessage() {}

func (x *ErrorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorRecord.ProtoReflect.Descriptor instead.
func (*ErrorRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ErrorRecord) GetExceptionMessage() string {
	if x != nil {
		return x.ExceptionMessage
	}
	return ""
}

func (x *ErrorRecord) GetStacktrace() string {
	if x != nil {
		return x.Stacktrace
	}
	return ""
}

func (x *ErrorRecord) GetErrorEventPosition() int64 {
	if x != nil {
		return x.ErrorEventPosition
	}
	return 0
}

func (x *ErrorRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

type IncidentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ErrorType            string          `protobuf:"bytes,2,opt,name=errorType,proto3" json:"errorType,omitempty"`
	ErrorMessage         string          `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	BpmnProcessId        string          `protobuf:"bytes,4,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	ProcessInstanceKey   int64           `protobuf:"varint,5,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementId            string          `protobuf:"bytes,6,opt,name=elementId,proto3" json:"elementId,omitempty"`
	ElementInstanceKey   int64           `protobuf:"varint,7,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	JobKey               int64           `protobuf:"varint,8,opt,name=jobKey,proto3" json:"jobKey,omitempty"`
	ProcessDefinitionKey int64           `protobuf:"varint,9,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	VariableScopeKey     int64           `protobuf:"varint,10,opt,name=variableScopeKey,proto3" json:"variableScopeKey,omitempty"`
	TenantId             string          `protobuf:"bytes,11,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *IncidentRecord) Reset() {
	*x = IncidentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentRecord) ProtoMessage() {}

func (x *IncidentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentRecord.ProtoReflect.Descriptor instead.
func (*IncidentRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{6}
}

func (x *IncidentRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IncidentRecord) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

func (x *IncidentRecord) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *IncidentRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *IncidentRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *IncidentRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *IncidentRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *IncidentRecord) GetJobKey() int64 {
	if x != nil {
		return x.JobKey
	}
	return 0
}

func (x *IncidentRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *IncidentRecord) GetVariableScopeKey() int64 {
	if x != nil {
		return x.VariableScopeKey
	}
	return 0
}

func (x *IncidentRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type JobRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                  *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Type                      string           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Worker                    string           `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty"`
	Retries                   int32            `protobuf:"varint,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Deadline                  int64            `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	ErrorMessage              string           `protobuf:"bytes,6,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	CustomHeaders             *structpb.Struct `protobuf:"bytes,7,opt,name=customHeaders,proto3" json:"customHeaders,omitempty"`
	Variables                 *structpb.Struct `protobuf:"bytes,8,opt,name=variables,proto3" json:"variables,omitempty"`
	ElementId                 string           `protobuf:"bytes,9,opt,name=elementId,proto3" json:"elementId,omitempty"`
	ElementInstanceKey        int64            `protobuf:"varint,10,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	BpmnProcessId             string           `protobuf:"bytes,11,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	WorkflowDefinitionVersion int32            `protobuf:"varint,12,opt,name=workflowDefinitionVersion,proto3" json:"workflowDefinitionVersion,omitempty"`
	ProcessInstanceKey        int64            `protobuf:"varint,13,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ProcessDefinitionKey      int64            `protobuf:"varint,14,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	TenantId                  string           `protobuf:"bytes,15,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *JobRecord) Reset() {
	*x = JobRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRecord) ProtoMessage() {}

func (x *JobRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRecord.ProtoReflect.Descriptor instead.
func (*JobRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{7}
}

func (x *JobRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobRecord) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *JobRecord) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *JobRecord) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *JobRecord) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *JobRecord) GetCustomHeaders() *structpb.Struct {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *JobRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *JobRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *JobRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *JobRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *JobRecord) GetWorkflowDefinitionVersion() int32 {
	if x != nil {
		return x.WorkflowDefinitionVersion
	}
	return 0
}

func (x *JobRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *JobRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *JobRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type JobBatchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata          *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Type              string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Worker            string          `protobuf:"bytes,3,opt,name=worker,proto3" json:"worker,omitempty"`
	Timeout           int64           `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MaxJobsToActivate int32           `protobuf:"varint,5,opt,name=maxJobsToActivate,proto3" json:"maxJobsToActivate,omitempty"`
	JobKeys           []int64         `protobuf:"varint,6,rep,packed,name=jobKeys,proto3" json:"jobKeys,omitempty"`
	Jobs              []*JobRecord    `protobuf:"bytes,7,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Truncated         bool            `protobuf:"varint,8,opt,name=truncated,proto3" json:"truncated,omitempty"`
	TenantIds         []string        `protobuf:"bytes,9,rep,name=tenantIds,proto3" json:"tenantIds,omitempty"`
}

func (x *JobBatchRecord) Reset() {
	*x = JobBatchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobBatchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBatchRecord) ProtoMessage() {}

func (x *JobBatchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBatchRecord.ProtoReflect.Descriptor instead.
func (*JobBatchRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{8}
}

func (x *JobBatchRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobBatchRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobBatchRecord) GetWorker() string {
	if x != nil {
		return x.Worker
	}
	return ""
}

func (x *JobBatchRecord) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *JobBatchRecord) GetMaxJobsToActivate() int32 {
	if x != nil {
		return x.MaxJobsToActivate
	}
	return 0
}

func (x *JobBatchRecord) GetJobKeys() []int64 {
	if x != nil {
		return x.JobKeys
	}
	return nil
}

func (x *JobBatchRecord) GetJobs() []*JobRecord {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *JobBatchRecord) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *JobBatchRecord) GetTenantIds() []string {
	if x != nil {
		return x.TenantIds
	}
	return nil
}

type MessageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CorrelationKey string           `protobuf:"bytes,3,opt,name=correlationKey,proto3" json:"correlationKey,omitempty"`
	MessageId      string           `protobuf:"bytes,4,opt,name=messageId,proto3" json:"messageId,omitempty"`
	TimeToLive     int64            `protobuf:"varint,5,opt,name=timeToLive,proto3" json:"timeToLive,omitempty"`
	Variables      *structpb.Struct `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId       string           `protobuf:"bytes,7,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *MessageRecord) Reset() {
	*x = MessageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRecord) ProtoMessage() {}

func (x *MessageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRecord.ProtoReflect.Descriptor instead.
func (*MessageRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{9}
}

func (x *MessageRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MessageRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageRecord) GetCorrelationKey() string {
	if x != nil {
		return x.CorrelationKey
	}
	return ""
}

func (x *MessageRecord) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageRecord) GetTimeToLive() int64 {
	if x != nil {
		return x.TimeToLive
	}
	return 0
}

func (x *MessageRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MessageRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type MessageSubscriptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessInstanceKey int64            `protobuf:"varint,2,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementInstanceKey int64            `protobuf:"varint,3,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	MessageName        string           `protobuf:"bytes,4,opt,name=messageName,proto3" json:"messageName,omitempty"`
	CorrelationKey     string           `protobuf:"bytes,5,opt,name=correlationKey,proto3" json:"correlationKey,omitempty"`
	BpmnProcessId      string           `protobuf:"bytes,6,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	MessageKey         int64            `protobuf:"varint,7,opt,name=messageKey,proto3" json:"messageKey,omitempty"`
	Variables          *structpb.Struct `protobuf:"bytes,8,opt,name=variables,proto3" json:"variables,omitempty"`
	IsInterrupting     bool             `protobuf:"varint,9,opt,name=isInterrupting,proto3" json:"isInterrupting,omitempty"`
	TenantId           string           `protobuf:"bytes,10,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *MessageSubscriptionRecord) Reset() {
	*x = MessageSubscriptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSubscriptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSubscriptionRecord) ProtoMessage() {}

func (x *MessageSubscriptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSubscriptionRecord.ProtoReflect.Descriptor instead.
func (*MessageSubscriptionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{10}
}

func (x *MessageSubscriptionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MessageSubscriptionRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *MessageSubscriptionRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *MessageSubscriptionRecord) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *MessageSubscriptionRecord) GetCorrelationKey() string {
	if x != nil {
		return x.CorrelationKey
	}
	return ""
}

func (x *MessageSubscriptionRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *MessageSubscriptionRecord) GetMessageKey() int64 {
	if x != nil {
		return x.MessageKey
	}
	return 0
}

func (x *MessageSubscriptionRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MessageSubscriptionRecord) GetIsInterrupting() bool {
	if x != nil {
		return x.IsInterrupting
	}
	return false
}

func (x *MessageSubscriptionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type MessageStartEventSubscriptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessDefinitionKey int64            `protobuf:"varint,2,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	StartEventId         string           `protobuf:"bytes,3,opt,name=startEventId,proto3" json:"startEventId,omitempty"`
	MessageName          string           `protobuf:"bytes,4,opt,name=messageName,proto3" json:"messageName,omitempty"`
	BpmnProcessId        string           `protobuf:"bytes,5,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	CorrelationKey       string           `protobuf:"bytes,6,opt,name=correlationKey,proto3" json:"correlationKey,omitempty"`
	MessageKey           int64            `protobuf:"varint,7,opt,name=messageKey,proto3" json:"messageKey,omitempty"`
	ProcessInstanceKey   int64            `protobuf:"varint,8,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	Variables            *structpb.Struct `protobuf:"bytes,9,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId             string           `protobuf:"bytes,10,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *MessageStartEventSubscriptionRecord) Reset() {
	*x = MessageStartEventSubscriptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStartEventSubscriptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStartEventSubscriptionRecord) ProtoMessage() {}

func (x *MessageStartEventSubscriptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStartEventSubscriptionRecord.ProtoReflect.Descriptor instead.
func (*MessageStartEventSubscriptionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{11}
}

func (x *MessageStartEventSubscriptionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MessageStartEventSubscriptionRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *MessageStartEventSubscriptionRecord) GetStartEventId() string {
	if x != nil {
		return x.StartEventId
	}
	return ""
}

func (x *MessageStartEventSubscriptionRecord) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *MessageStartEventSubscriptionRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *MessageStartEventSubscriptionRecord) GetCorrelationKey() string {
	if x != nil {
		return x.CorrelationKey
	}
	return ""
}

func (x *MessageStartEventSubscriptionRecord) GetMessageKey() int64 {
	if x != nil {
		return x.MessageKey
	}
	return 0
}

func (x *MessageStartEventSubscriptionRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *MessageStartEventSubscriptionRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MessageStartEventSubscriptionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type TimerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ElementInstanceKey   int64           `protobuf:"varint,2,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	DueDate              int64           `protobuf:"varint,3,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	Repetitions          int32           `protobuf:"varint,4,opt,name=repetitions,proto3" json:"repetitions,omitempty"`
	TargetElementId      string          `protobuf:"bytes,5,opt,name=targetElementId,proto3" json:"targetElementId,omitempty"`
	ProcessInstanceKey   int64           `protobuf:"varint,6,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ProcessDefinitionKey int64           `protobuf:"varint,7,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	TenantId             string          `protobuf:"bytes,8,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *TimerRecord) Reset() {
	*x = TimerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerRecord) ProtoMessage() {}

func (x *TimerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerRecord.ProtoReflect.Descriptor instead.
func (*TimerRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{12}
}

func (x *TimerRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TimerRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *TimerRecord) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *TimerRecord) GetRepetitions() int32 {
	if x != nil {
		return x.Repetitions
	}
	return 0
}

func (x *TimerRecord) GetTargetElementId() string {
	if x != nil {
		return x.TargetElementId
	}
	return ""
}

func (x *TimerRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *TimerRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *TimerRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type VariableRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                string          `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ScopeKey             int64           `protobuf:"varint,4,opt,name=scopeKey,proto3" json:"scopeKey,omitempty"`
	ProcessInstanceKey   int64           `protobuf:"varint,5,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ProcessDefinitionKey int64           `protobuf:"varint,6,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	BpmnProcessId        string          `protobuf:"bytes,7,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	TenantId             string          `protobuf:"bytes,8,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *VariableRecord) Reset() {
	*x = VariableRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableRecord) ProtoMessage() {}

func (x *VariableRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableRecord.ProtoReflect.Descriptor instead.
func (*VariableRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{13}
}

func (x *VariableRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VariableRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *VariableRecord) GetScopeKey() int64 {
	if x != nil {
		return x.ScopeKey
	}
	return 0
}

func (x *VariableRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *VariableRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *VariableRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *VariableRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type VariableDocumentRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *RecordMetadata                        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ScopeKey        int64                                  `protobuf:"varint,2,opt,name=scopeKey,proto3" json:"scopeKey,omitempty"`
	UpdateSemantics VariableDocumentRecord_UpdateSemantics `protobuf:"varint,3,opt,name=updateSemantics,proto3,enum=exporter_protocol.VariableDocumentRecord_UpdateSemantics" json:"updateSemantics,omitempty"`
	Variables       *structpb.Struct                       `protobuf:"bytes,4,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId        string                                 `protobuf:"bytes,5,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *VariableDocumentRecord) Reset() {
	*x = VariableDocumentRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDocumentRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDocumentRecord) ProtoMessage() {}

func (x *VariableDocumentRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDocumentRecord.ProtoReflect.Descriptor instead.
func (*VariableDocumentRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{14}
}

func (x *VariableDocumentRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VariableDocumentRecord) GetScopeKey() int64 {
	if x != nil {
		return x.ScopeKey
	}
	return 0
}

func (x *VariableDocumentRecord) GetUpdateSemantics() VariableDocumentRecord_UpdateSemantics {
	if x != nil {
		return x.UpdateSemantics
	}
	return VariableDocumentRecord_UNKNOWN_UPDATE_SEMANTICS
}

func (x *VariableDocumentRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *VariableDocumentRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessInstanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                 *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	BpmnProcessId            string          `protobuf:"bytes,2,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Version                  int32           `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ProcessDefinitionKey     int64           `protobuf:"varint,4,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey       int64           `protobuf:"varint,5,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementId                string          `protobuf:"bytes,6,opt,name=elementId,proto3" json:"elementId,omitempty"`
	FlowScopeKey             int64           `protobuf:"varint,7,opt,name=flowScopeKey,proto3" json:"flowScopeKey,omitempty"`
	BpmnElementType          string          `protobuf:"bytes,8,opt,name=bpmnElementType,proto3" json:"bpmnElementType,omitempty"`
	ParentProcessInstanceKey int64           `protobuf:"varint,9,opt,name=parentProcessInstanceKey,proto3" json:"parentProcessInstanceKey,omitempty"`
	ParentElementInstanceKey int64           `protobuf:"varint,10,opt,name=parentElementInstanceKey,proto3" json:"parentElementInstanceKey,omitempty"`
	BpmnEventType            string          `protobuf:"bytes,11,opt,name=bpmnEventType,proto3" json:"bpmnEventType,omitempty"`
	TenantId                 string          `protobuf:"bytes,12,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessInstanceRecord) Reset() {
	*x = ProcessInstanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceRecord) ProtoMessage() {}

func (x *ProcessInstanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceRecord.ProtoReflect.Descriptor instead.
func (*ProcessInstanceRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessInstanceRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessInstanceRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *ProcessInstanceRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcessInstanceRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *ProcessInstanceRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *ProcessInstanceRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ProcessInstanceRecord) GetFlowScopeKey() int64 {
	if x != nil {
		return x.FlowScopeKey
	}
	return 0
}

func (x *ProcessInstanceRecord) GetBpmnElementType() string {
	if x != nil {
		return x.BpmnElementType
	}
	return ""
}

func (x *ProcessInstanceRecord) GetParentProcessInstanceKey() int64 {
	if x != nil {
		return x.ParentProcessInstanceKey
	}
	return 0
}

func (x *ProcessInstanceRecord) GetParentElementInstanceKey() int64 {
	if x != nil {
		return x.ParentElementInstanceKey
	}
	return 0
}

func (x *ProcessInstanceRecord) GetBpmnEventType() string {
	if x != nil {
		return x.BpmnEventType
	}
	return ""
}

func (x *ProcessInstanceRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessInstanceCreationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	BpmnProcessId        string           `protobuf:"bytes,2,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Version              int32            `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ProcessDefinitionKey int64            `protobuf:"varint,4,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey   int64            `protobuf:"varint,5,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	Variables            *structpb.Struct `protobuf:"bytes,6,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId             string           `protobuf:"bytes,7,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessInstanceCreationRecord) Reset() {
	*x = ProcessInstanceCreationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceCreationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceCreationRecord) ProtoMessage() {}

func (x *ProcessInstanceCreationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceCreationRecord.ProtoReflect.Descriptor instead.
func (*ProcessInstanceCreationRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessInstanceCreationRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessInstanceCreationRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *ProcessInstanceCreationRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcessInstanceCreationRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *ProcessInstanceCreationRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *ProcessInstanceCreationRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ProcessInstanceCreationRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessMessageSubscriptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessInstanceKey int64            `protobuf:"varint,2,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementInstanceKey int64            `protobuf:"varint,3,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	MessageName        string           `protobuf:"bytes,4,opt,name=messageName,proto3" json:"messageName,omitempty"`
	Variables          *structpb.Struct `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	BpmnProcessId      string           `protobuf:"bytes,6,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	MessageKey         int64            `protobuf:"varint,7,opt,name=messageKey,proto3" json:"messageKey,omitempty"`
	ElementId          string           `protobuf:"bytes,8,opt,name=elementId,proto3" json:"elementId,omitempty"`
	CorrelationKey     string           `protobuf:"bytes,9,opt,name=correlationKey,proto3" json:"correlationKey,omitempty"`
	IsInterrupting     bool             `protobuf:"varint,10,opt,name=isInterrupting,proto3" json:"isInterrupting,omitempty"`
	TenantId           string           `protobuf:"bytes,11,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessMessageSubscriptionRecord) Reset() {
	*x = ProcessMessageSubscriptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMessageSubscriptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMessageSubscriptionRecord) ProtoMessage() {}

func (x *ProcessMessageSubscriptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMessageSubscriptionRecord.ProtoReflect.Descriptor instead.
func (*ProcessMessageSubscriptionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{17}
}

func (x *ProcessMessageSubscriptionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessMessageSubscriptionRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *ProcessMessageSubscriptionRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *ProcessMessageSubscriptionRecord) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *ProcessMessageSubscriptionRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ProcessMessageSubscriptionRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *ProcessMessageSubscriptionRecord) GetMessageKey() int64 {
	if x != nil {
		return x.MessageKey
	}
	return 0
}

func (x *ProcessMessageSubscriptionRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ProcessMessageSubscriptionRecord) GetCorrelationKey() string {
	if x != nil {
		return x.CorrelationKey
	}
	return ""
}

func (x *ProcessMessageSubscriptionRecord) GetIsInterrupting() bool {
	if x != nil {
		return x.IsInterrupting
	}
	return false
}

func (x *ProcessMessageSubscriptionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	BpmnProcessId        string          `protobuf:"bytes,2,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Version              int32           `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	ProcessDefinitionKey int64           `protobuf:"varint,4,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ResourceName         string          `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Checksum             []byte          `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Resource             []byte          `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	TenantId             string          `protobuf:"bytes,8,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessRecord) Reset() {
	*x = ProcessRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRecord) ProtoMessage() {}

func (x *ProcessRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRecord.ProtoReflect.Descriptor instead.
func (*ProcessRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *ProcessRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcessRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *ProcessRecord) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ProcessRecord) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ProcessRecord) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ProcessRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessEventRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata             *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ScopeKey             int64            `protobuf:"varint,2,opt,name=scopeKey,proto3" json:"scopeKey,omitempty"`
	ProcessDefinitionKey int64            `protobuf:"varint,3,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	TargetElementId      string           `protobuf:"bytes,4,opt,name=targetElementId,proto3" json:"targetElementId,omitempty"`
	Variables            *structpb.Struct `protobuf:"bytes,5,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId             string           `protobuf:"bytes,6,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessEventRecord) Reset() {
	*x = ProcessEventRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEventRecord) ProtoMessage() {}

func (x *ProcessEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEventRecord.ProtoReflect.Descriptor instead.
func (*ProcessEventRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{19}
}

func (x *ProcessEventRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessEventRecord) GetScopeKey() int64 {
	if x != nil {
		return x.ScopeKey
	}
	return 0
}

func (x *ProcessEventRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *ProcessEventRecord) GetTargetElementId() string {
	if x != nil {
		return x.TargetElementId
	}
	return ""
}

func (x *ProcessEventRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ProcessEventRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DecisionId              string          `protobuf:"bytes,2,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	Version                 int32           `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	DecisionKey             int64           `protobuf:"varint,4,opt,name=decisionKey,proto3" json:"decisionKey,omitempty"`
	DecisionName            string          `protobuf:"bytes,5,opt,name=decisionName,proto3" json:"decisionName,omitempty"`
	DecisionRequirementsId  string          `protobuf:"bytes,6,opt,name=decisionRequirementsId,proto3" json:"decisionRequirementsId,omitempty"`
	DecisionRequirementsKey int64           `protobuf:"varint,7,opt,name=decisionRequirementsKey,proto3" json:"decisionRequirementsKey,omitempty"`
	IsDuplicate             bool            `protobuf:"varint,8,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId                string          `protobuf:"bytes,9,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DecisionRecord) Reset() {
	*x = DecisionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionRecord) ProtoMessage() {}

func (x *DecisionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionRecord.ProtoReflect.Descriptor instead.
func (*DecisionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{20}
}

func (x *DecisionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DecisionRecord) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *DecisionRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DecisionRecord) GetDecisionKey() int64 {
	if x != nil {
		return x.DecisionKey
	}
	return 0
}

func (x *DecisionRecord) GetDecisionName() string {
	if x != nil {
		return x.DecisionName
	}
	return ""
}

func (x *DecisionRecord) GetDecisionRequirementsId() string {
	if x != nil {
		return x.DecisionRequirementsId
	}
	return ""
}

func (x *DecisionRecord) GetDecisionRequirementsKey() int64 {
	if x != nil {
		return x.DecisionRequirementsKey
	}
	return 0
}

func (x *DecisionRecord) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *DecisionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionRequirementsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionRequirementsId      string `protobuf:"bytes,1,opt,name=decisionRequirementsId,proto3" json:"decisionRequirementsId,omitempty"`
	DecisionRequirementsName    string `protobuf:"bytes,2,opt,name=decisionRequirementsName,proto3" json:"decisionRequirementsName,omitempty"`
	DecisionRequirementsVersion int32  `protobuf:"varint,3,opt,name=decisionRequirementsVersion,proto3" json:"decisionRequirementsVersion,omitempty"`
	DecisionRequirementsKey     int64  `protobuf:"varint,4,opt,name=decisionRequirementsKey,proto3" json:"decisionRequirementsKey,omitempty"`
	Namespace                   string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceName                string `protobuf:"bytes,6,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Checksum                    []byte `protobuf:"bytes,7,opt,name=checksum,proto3" json:"checksum,omitempty"`
	IsDuplicate                 bool   `protobuf:"varint,8,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId                    string `protobuf:"bytes,9,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DecisionRequirementsMetadata) Reset() {
	*x = DecisionRequirementsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionRequirementsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionRequirementsMetadata) ProtoMessage() {}

func (x *DecisionRequirementsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionRequirementsMetadata.ProtoReflect.Descriptor instead.
func (*DecisionRequirementsMetadata) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{21}
}

func (x *DecisionRequirementsMetadata) GetDecisionRequirementsId() string {
	if x != nil {
		return x.DecisionRequirementsId
	}
	return ""
}

func (x *DecisionRequirementsMetadata) GetDecisionRequirementsName() string {
	if x != nil {
		return x.DecisionRequirementsName
	}
	return ""
}

func (x *DecisionRequirementsMetadata) GetDecisionRequirementsVersion() int32 {
	if x != nil {
		return x.DecisionRequirementsVersion
	}
	return 0
}

func (x *DecisionRequirementsMetadata) GetDecisionRequirementsKey() int64 {
	if x != nil {
		return x.DecisionRequirementsKey
	}
	return 0
}

func (x *DecisionRequirementsMetadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DecisionRequirementsMetadata) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DecisionRequirementsMetadata) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *DecisionRequirementsMetadata) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *DecisionRequirementsMetadata) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionRequirementsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                     *RecordMetadata               `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DecisionRequirementsMetadata *DecisionRequirementsMetadata `protobuf:"bytes,2,opt,name=decisionRequirementsMetadata,proto3" json:"decisionRequirementsMetadata,omitempty"`
	Resource                     []byte                        `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	TenantId                     string                        `protobuf:"bytes,4,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DecisionRequirementsRecord) Reset() {
	*x = DecisionRequirementsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionRequirementsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionRequirementsRecord) ProtoMessage() {}

func (x *DecisionRequirementsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionRequirementsRecord.ProtoReflect.Descriptor instead.
func (*DecisionRequirementsRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{22}
}

func (x *DecisionRequirementsRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DecisionRequirementsRecord) GetDecisionRequirementsMetadata() *DecisionRequirementsMetadata {
	if x != nil {
		return x.DecisionRequirementsMetadata
	}
	return nil
}

func (x *DecisionRequirementsRecord) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *DecisionRequirementsRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionEvaluationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                 *RecordMetadata                               `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DecisionKey              int64                                         `protobuf:"varint,2,opt,name=decisionKey,proto3" json:"decisionKey,omitempty"`
	DecisionId               string                                        `protobuf:"bytes,3,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	DecisionName             string                                        `protobuf:"bytes,4,opt,name=decisionName,proto3" json:"decisionName,omitempty"`
	DecisionVersion          int32                                         `protobuf:"varint,5,opt,name=decisionVersion,proto3" json:"decisionVersion,omitempty"`
	DecisionRequirementsId   string                                        `protobuf:"bytes,6,opt,name=decisionRequirementsId,proto3" json:"decisionRequirementsId,omitempty"`
	DecisionRequirementsKey  int64                                         `protobuf:"varint,7,opt,name=decisionRequirementsKey,proto3" json:"decisionRequirementsKey,omitempty"`
	DecisionOutput           string                                        `protobuf:"bytes,8,opt,name=decisionOutput,proto3" json:"decisionOutput,omitempty"`
	BpmnProcessId            string                                        `protobuf:"bytes,9,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	ProcessDefinitionKey     int64                                         `protobuf:"varint,10,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey       int64                                         `protobuf:"varint,11,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementId                string                                        `protobuf:"bytes,12,opt,name=elementId,proto3" json:"elementId,omitempty"`
	ElementInstanceKey       int64                                         `protobuf:"varint,13,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	EvaluationFailureMessage string                                        `protobuf:"bytes,14,opt,name=evaluationFailureMessage,proto3" json:"evaluationFailureMessage,omitempty"`
	FailedDecisionId         string                                        `protobuf:"bytes,15,opt,name=failedDecisionId,proto3" json:"failedDecisionId,omitempty"`
	EvaluatedDecisions       []*DecisionEvaluationRecord_EvaluatedDecision `protobuf:"bytes,16,rep,name=evaluatedDecisions,proto3" json:"evaluatedDecisions,omitempty"`
	TenantId                 string                                        `protobuf:"bytes,17,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DecisionEvaluationRecord) Reset() {
	*x = DecisionEvaluationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEvaluationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEvaluationRecord) ProtoMessage() {}

func (x *DecisionEvaluationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEvaluationRecord.ProtoReflect.Descriptor instead.
func (*DecisionEvaluationRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{23}
}

func (x *DecisionEvaluationRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DecisionEvaluationRecord) GetDecisionKey() int64 {
	if x != nil {
		return x.DecisionKey
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetDecisionName() string {
	if x != nil {
		return x.DecisionName
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetDecisionVersion() int32 {
	if x != nil {
		return x.DecisionVersion
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetDecisionRequirementsId() string {
	if x != nil {
		return x.DecisionRequirementsId
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetDecisionRequirementsKey() int64 {
	if x != nil {
		return x.DecisionRequirementsKey
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetDecisionOutput() string {
	if x != nil {
		return x.DecisionOutput
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *DecisionEvaluationRecord) GetEvaluationFailureMessage() string {
	if x != nil {
		return x.EvaluationFailureMessage
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetFailedDecisionId() string {
	if x != nil {
		return x.FailedDecisionId
	}
	return ""
}

func (x *DecisionEvaluationRecord) GetEvaluatedDecisions() []*DecisionEvaluationRecord_EvaluatedDecision {
	if x != nil {
		return x.EvaluatedDecisions
	}
	return nil
}

func (x *DecisionEvaluationRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProcessInstanceModificationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata              *RecordMetadata                                                                      `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessInstanceKey    int64                                                                                `protobuf:"varint,2,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	TerminateInstructions []*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction `protobuf:"bytes,3,rep,name=terminateInstructions,proto3" json:"terminateInstructions,omitempty"`
	ActivateInstructions  []*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction  `protobuf:"bytes,4,rep,name=activateInstructions,proto3" json:"activateInstructions,omitempty"`
	TenantId              string                                                                               `protobuf:"bytes,5,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ProcessInstanceModificationRecord) Reset() {
	*x = ProcessInstanceModificationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceModificationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceModificationRecord) ProtoMessage() {}

func (x *ProcessInstanceModificationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceModificationRecord.ProtoReflect.Descriptor instead.
func (*ProcessInstanceModificationRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessInstanceModificationRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessInstanceModificationRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *ProcessInstanceModificationRecord) GetTerminateInstructions() []*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction {
	if x != nil {
		return x.TerminateInstructions
	}
	return nil
}

func (x *ProcessInstanceModificationRecord) GetActivateInstructions() []*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction {
	if x != nil {
		return x.ActivateInstructions
	}
	return nil
}

func (x *ProcessInstanceModificationRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CheckpointRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id       int64           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Position int64           `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CheckpointRecord) Reset() {
	*x = CheckpointRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointRecord) ProtoMessage() {}

func (x *CheckpointRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointRecord.ProtoReflect.Descriptor instead.
func (*CheckpointRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{25}
}

func (x *CheckpointRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CheckpointRecord) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckpointRecord) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type SignalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata   *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SignalName string           `protobuf:"bytes,2,opt,name=signalName,proto3" json:"signalName,omitempty"`
	Variables  *structpb.Struct `protobuf:"bytes,3,opt,name=variables,proto3" json:"variables,omitempty"`
	TenantId   string           `protobuf:"bytes,4,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SignalRecord) Reset() {
	*x = SignalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRecord) ProtoMessage() {}

func (x *SignalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRecord.ProtoReflect.Descriptor instead.
func (*SignalRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{26}
}

func (x *SignalRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SignalRecord) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *SignalRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type SignalSubscriptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata              *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SignalName            string          `protobuf:"bytes,2,opt,name=signalName,proto3" json:"signalName,omitempty"`
	ProcessDefinitionKey  int64           `protobuf:"varint,3,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	BpmnProcessId         string          `protobuf:"bytes,4,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	CatchEventId          string          `protobuf:"bytes,5,opt,name=catchEventId,proto3" json:"catchEventId,omitempty"`
	CatchEventInstanceKey int64           `protobuf:"varint,6,opt,name=catchEventInstanceKey,proto3" json:"catchEventInstanceKey,omitempty"`
	TenantId              string          `protobuf:"bytes,7,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *SignalSubscriptionRecord) Reset() {
	*x = SignalSubscriptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSubscriptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSubscriptionRecord) ProtoMessage() {}

func (x *SignalSubscriptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSubscriptionRecord.ProtoReflect.Descriptor instead.
func (*SignalSubscriptionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{27}
}

func (x *SignalSubscriptionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SignalSubscriptionRecord) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalSubscriptionRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *SignalSubscriptionRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *SignalSubscriptionRecord) GetCatchEventId() string {
	if x != nil {
		return x.CatchEventId
	}
	return ""
}

func (x *SignalSubscriptionRecord) GetCatchEventInstanceKey() int64 {
	if x != nil {
		return x.CatchEventInstanceKey
	}
	return 0
}

func (x *SignalSubscriptionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type FormRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata     *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	FormId       string          `protobuf:"bytes,2,opt,name=formId,proto3" json:"formId,omitempty"`
	Version      int32           `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	FormKey      int64           `protobuf:"varint,4,opt,name=formKey,proto3" json:"formKey,omitempty"`
	ResourceName string          `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Checksum     []byte          `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Resource     []byte          `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	IsDuplicate  bool            `protobuf:"varint,8,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId     string          `protobuf:"bytes,9,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FormRecord) Reset() {
	*x = FormRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormRecord) ProtoMessage() {}

func (x *FormRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormRecord.ProtoReflect.Descriptor instead.
func (*FormRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{28}
}

func (x *FormRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FormRecord) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *FormRecord) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FormRecord) GetFormKey() int64 {
	if x != nil {
		return x.FormKey
	}
	return 0
}

func (x *FormRecord) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *FormRecord) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *FormRecord) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *FormRecord) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *FormRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ResourceDeletionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ResourceKey int64           `protobuf:"varint,2,opt,name=resourceKey,proto3" json:"resourceKey,omitempty"`
	TenantId    string          `protobuf:"bytes,3,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ResourceDeletionRecord) Reset() {
	*x = ResourceDeletionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDeletionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDeletionRecord) ProtoMessage() {}

func (x *ResourceDeletionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDeletionRecord.ProtoReflect.Descriptor instead.
func (*ResourceDeletionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{29}
}

func (x *ResourceDeletionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceDeletionRecord) GetResourceKey() int64 {
	if x != nil {
		return x.ResourceKey
	}
	return 0
}

func (x *ResourceDeletionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type UserTaskRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	UserTaskKey int64           `protobuf:"varint,2,opt,name=userTaskKey,proto3" json:"userTaskKey,omitempty"`
	Assignee    string          `protobuf:"bytes,3,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// Deprecated: Marked as deprecated in internal/server/schema.proto.
	CandidateGroups string `protobuf:"bytes,4,opt,name=candidateGroups,proto3" json:"candidateGroups,omitempty"`
	// Deprecated: Marked as deprecated in internal/server/schema.proto.
	CandidateUsers           string           `protobuf:"bytes,5,opt,name=candidateUsers,proto3" json:"candidateUsers,omitempty"`
	DueDate                  string           `protobuf:"bytes,6,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	FollowUpDate             string           `protobuf:"bytes,7,opt,name=followUpDate,proto3" json:"followUpDate,omitempty"`
	FormKey                  int64            `protobuf:"varint,8,opt,name=formKey,proto3" json:"formKey,omitempty"`
	Variables                *structpb.Struct `protobuf:"bytes,9,opt,name=variables,proto3" json:"variables,omitempty"`
	BpmnProcessId            string           `protobuf:"bytes,10,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	ProcessDefinitionVersion int32            `protobuf:"varint,11,opt,name=processDefinitionVersion,proto3" json:"processDefinitionVersion,omitempty"`
	ProcessDefinitionKey     int64            `protobuf:"varint,12,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ProcessInstanceKey       int64            `protobuf:"varint,13,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ElementId                string           `protobuf:"bytes,14,opt,name=elementId,proto3" json:"elementId,omitempty"`
	ElementInstanceKey       int64            `protobuf:"varint,15,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
	TenantId                 string           `protobuf:"bytes,16,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	CandidateGroup           []string         `protobuf:"bytes,17,rep,name=candidateGroup,proto3" json:"candidateGroup,omitempty"`
	CandidateUser            []string         `protobuf:"bytes,18,rep,name=candidateUser,proto3" json:"candidateUser,omitempty"`
	ExternalFormReference    string           `protobuf:"bytes,19,opt,name=externalFormReference,proto3" json:"externalFormReference,omitempty"`
	CustomHeaders            *structpb.Struct `protobuf:"bytes,20,opt,name=customHeaders,proto3" json:"customHeaders,omitempty"`
	ChangedAttribute         []string         `protobuf:"bytes,21,rep,name=changedAttribute,proto3" json:"changedAttribute,omitempty"`
	Action                   string           `protobuf:"bytes,22,opt,name=action,proto3" json:"action,omitempty"`
	CreationTimestamp        int64            `protobuf:"varint,23,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
}

func (x *UserTaskRecord) Reset() {
	*x = UserTaskRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRecord) ProtoMessage() {}

func (x *UserTaskRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRecord.ProtoReflect.Descriptor instead.
func (*UserTaskRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{30}
}

func (x *UserTaskRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserTaskRecord) GetUserTaskKey() int64 {
	if x != nil {
		return x.UserTaskKey
	}
	return 0
}

func (x *UserTaskRecord) GetAssignee() string {
	if x != nil {
		return x.Assignee
	}
	return ""
}

// Deprecated: Marked as deprecated in internal/server/schema.proto.
func (x *UserTaskRecord) GetCandidateGroups() string {
	if x != nil {
		return x.CandidateGroups
	}
	return ""
}

// Deprecated: Marked as deprecated in internal/server/schema.proto.
func (x *UserTaskRecord) GetCandidateUsers() string {
	if x != nil {
		return x.CandidateUsers
	}
	return ""
}

func (x *UserTaskRecord) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *UserTaskRecord) GetFollowUpDate() string {
	if x != nil {
		return x.FollowUpDate
	}
	return ""
}

func (x *UserTaskRecord) GetFormKey() int64 {
	if x != nil {
		return x.FormKey
	}
	return 0
}

func (x *UserTaskRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *UserTaskRecord) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *UserTaskRecord) GetProcessDefinitionVersion() int32 {
	if x != nil {
		return x.ProcessDefinitionVersion
	}
	return 0
}

func (x *UserTaskRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *UserTaskRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *UserTaskRecord) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *UserTaskRecord) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

func (x *UserTaskRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UserTaskRecord) GetCandidateGroup() []string {
	if x != nil {
		return x.CandidateGroup
	}
	return nil
}

func (x *UserTaskRecord) GetCandidateUser() []string {
	if x != nil {
		return x.CandidateUser
	}
	return nil
}

func (x *UserTaskRecord) GetExternalFormReference() string {
	if x != nil {
		return x.ExternalFormReference
	}
	return ""
}

func (x *UserTaskRecord) GetCustomHeaders() *structpb.Struct {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *UserTaskRecord) GetChangedAttribute() []string {
	if x != nil {
		return x.ChangedAttribute
	}
	return nil
}

func (x *UserTaskRecord) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UserTaskRecord) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

type CompensationSubscriptionRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                       *RecordMetadata  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	TenantId                       string           `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ProcessInstanceKey             int64            `protobuf:"varint,3,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	ProcessDefinitionKey           int64            `protobuf:"varint,4,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	CompensableActivityId          string           `protobuf:"bytes,5,opt,name=compensableActivityId,proto3" json:"compensableActivityId,omitempty"`
	ThrowEventId                   string           `protobuf:"bytes,6,opt,name=throwEventId,proto3" json:"throwEventId,omitempty"`
	ThrowEventInstanceKey          int64            `protobuf:"varint,7,opt,name=throwEventInstanceKey,proto3" json:"throwEventInstanceKey,omitempty"`
	CompensationHandlerId          string           `protobuf:"bytes,8,opt,name=compensationHandlerId,proto3" json:"compensationHandlerId,omitempty"`
	CompensationHandlerInstanceKey int64            `protobuf:"varint,9,opt,name=compensationHandlerInstanceKey,proto3" json:"compensationHandlerInstanceKey,omitempty"`
	CompensableActivityScopeKey    int64            `protobuf:"varint,10,opt,name=compensableActivityScopeKey,proto3" json:"compensableActivityScopeKey,omitempty"`
	CompensableActivityInstanceKey int64            `protobuf:"varint,11,opt,name=compensableActivityInstanceKey,proto3" json:"compensableActivityInstanceKey,omitempty"`
	Variables                      *structpb.Struct `protobuf:"bytes,12,opt,name=variables,proto3" json:"variables,omitempty"`
}

func (x *CompensationSubscriptionRecord) Reset() {
	*x = CompensationSubscriptionRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensationSubscriptionRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationSubscriptionRecord) ProtoMessage() {}

func (x *CompensationSubscriptionRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationSubscriptionRecord.ProtoReflect.Descriptor instead.
func (*CompensationSubscriptionRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{31}
}

func (x *CompensationSubscriptionRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CompensationSubscriptionRecord) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CompensationSubscriptionRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetCompensableActivityId() string {
	if x != nil {
		return x.CompensableActivityId
	}
	return ""
}

func (x *CompensationSubscriptionRecord) GetThrowEventId() string {
	if x != nil {
		return x.ThrowEventId
	}
	return ""
}

func (x *CompensationSubscriptionRecord) GetThrowEventInstanceKey() int64 {
	if x != nil {
		return x.ThrowEventInstanceKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetCompensationHandlerId() string {
	if x != nil {
		return x.CompensationHandlerId
	}
	return ""
}

func (x *CompensationSubscriptionRecord) GetCompensationHandlerInstanceKey() int64 {
	if x != nil {
		return x.CompensationHandlerInstanceKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetCompensableActivityScopeKey() int64 {
	if x != nil {
		return x.CompensableActivityScopeKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetCompensableActivityInstanceKey() int64 {
	if x != nil {
		return x.CompensableActivityInstanceKey
	}
	return 0
}

func (x *CompensationSubscriptionRecord) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

type EscalationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata           *RecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessInstanceKey int64           `protobuf:"varint,2,opt,name=processInstanceKey,proto3" json:"processInstanceKey,omitempty"`
	EscalationCode     string          `protobuf:"bytes,3,opt,name=escalationCode,proto3" json:"escalationCode,omitempty"`
	ThrowElementId     string          `protobuf:"bytes,4,opt,name=throwElementId,proto3" json:"throwElementId,omitempty"`
	CatchElementId     string          `protobuf:"bytes,5,opt,name=catchElementId,proto3" json:"catchElementId,omitempty"`
}

func (x *EscalationRecord) Reset() {
	*x = EscalationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EscalationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EscalationRecord) ProtoMessage() {}

func (x *EscalationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EscalationRecord.ProtoReflect.Descriptor instead.
func (*EscalationRecord) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{32}
}

func (x *EscalationRecord) GetMetadata() *RecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EscalationRecord) GetProcessInstanceKey() int64 {
	if x != nil {
		return x.ProcessInstanceKey
	}
	return 0
}

func (x *EscalationRecord) GetEscalationCode() string {
	if x != nil {
		return x.EscalationCode
	}
	return ""
}

func (x *EscalationRecord) GetThrowElementId() string {
	if x != nil {
		return x.ThrowElementId
	}
	return ""
}

func (x *EscalationRecord) GetCatchElementId() string {
	if x != nil {
		return x.CatchElementId
	}
	return ""
}

type DeploymentRecord_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource     []byte `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceName string `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
}

func (x *DeploymentRecord_Resource) Reset() {
	*x = DeploymentRecord_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRecord_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRecord_Resource) ProtoMessage() {}

func (x *DeploymentRecord_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRecord_Resource.ProtoReflect.Descriptor instead.
func (*DeploymentRecord_Resource) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DeploymentRecord_Resource) GetResource() []byte {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *DeploymentRecord_Resource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type DeploymentRecord_ProcessMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BpmnProcessId        string `protobuf:"bytes,1,opt,name=bpmnProcessId,proto3" json:"bpmnProcessId,omitempty"`
	Version              int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ProcessDefinitionKey int64  `protobuf:"varint,3,opt,name=processDefinitionKey,proto3" json:"processDefinitionKey,omitempty"`
	ResourceName         string `protobuf:"bytes,5,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Checksum             []byte `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	IsDuplicate          bool   `protobuf:"varint,7,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId             string `protobuf:"bytes,8,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DeploymentRecord_ProcessMetadata) Reset() {
	*x = DeploymentRecord_ProcessMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRecord_ProcessMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRecord_ProcessMetadata) ProtoMessage() {}

func (x *DeploymentRecord_ProcessMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRecord_ProcessMetadata.ProtoReflect.Descriptor instead.
func (*DeploymentRecord_ProcessMetadata) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{3, 1}
}

func (x *DeploymentRecord_ProcessMetadata) GetBpmnProcessId() string {
	if x != nil {
		return x.BpmnProcessId
	}
	return ""
}

func (x *DeploymentRecord_ProcessMetadata) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeploymentRecord_ProcessMetadata) GetProcessDefinitionKey() int64 {
	if x != nil {
		return x.ProcessDefinitionKey
	}
	return 0
}

func (x *DeploymentRecord_ProcessMetadata) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeploymentRecord_ProcessMetadata) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *DeploymentRecord_ProcessMetadata) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *DeploymentRecord_ProcessMetadata) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeploymentRecord_DecisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionId              string `protobuf:"bytes,1,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	Version                 int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	DecisionKey             int64  `protobuf:"varint,3,opt,name=decisionKey,proto3" json:"decisionKey,omitempty"`
	DecisionName            string `protobuf:"bytes,4,opt,name=decisionName,proto3" json:"decisionName,omitempty"`
	DecisionRequirementsId  string `protobuf:"bytes,5,opt,name=decisionRequirementsId,proto3" json:"decisionRequirementsId,omitempty"`
	DecisionRequirementsKey int64  `protobuf:"varint,6,opt,name=decisionRequirementsKey,proto3" json:"decisionRequirementsKey,omitempty"`
	IsDuplicate             bool   `protobuf:"varint,7,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId                string `protobuf:"bytes,8,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DeploymentRecord_DecisionMetadata) Reset() {
	*x = DeploymentRecord_DecisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRecord_DecisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRecord_DecisionMetadata) ProtoMessage() {}

func (x *DeploymentRecord_DecisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRecord_DecisionMetadata.ProtoReflect.Descriptor instead.
func (*DeploymentRecord_DecisionMetadata) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{3, 2}
}

func (x *DeploymentRecord_DecisionMetadata) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *DeploymentRecord_DecisionMetadata) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeploymentRecord_DecisionMetadata) GetDecisionKey() int64 {
	if x != nil {
		return x.DecisionKey
	}
	return 0
}

func (x *DeploymentRecord_DecisionMetadata) GetDecisionName() string {
	if x != nil {
		return x.DecisionName
	}
	return ""
}

func (x *DeploymentRecord_DecisionMetadata) GetDecisionRequirementsId() string {
	if x != nil {
		return x.DecisionRequirementsId
	}
	return ""
}

func (x *DeploymentRecord_DecisionMetadata) GetDecisionRequirementsKey() int64 {
	if x != nil {
		return x.DecisionRequirementsKey
	}
	return 0
}

func (x *DeploymentRecord_DecisionMetadata) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *DeploymentRecord_DecisionMetadata) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeploymentRecord_FormMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId       string `protobuf:"bytes,1,opt,name=formId,proto3" json:"formId,omitempty"`
	Version      int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	FormKey      int64  `protobuf:"varint,3,opt,name=formKey,proto3" json:"formKey,omitempty"`
	ResourceName string `protobuf:"bytes,4,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	Checksum     []byte `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	IsDuplicate  bool   `protobuf:"varint,6,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	TenantId     string `protobuf:"bytes,7,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DeploymentRecord_FormMetadata) Reset() {
	*x = DeploymentRecord_FormMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentRecord_FormMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentRecord_FormMetadata) ProtoMessage() {}

func (x *DeploymentRecord_FormMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentRecord_FormMetadata.ProtoReflect.Descriptor instead.
func (*DeploymentRecord_FormMetadata) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{3, 3}
}

func (x *DeploymentRecord_FormMetadata) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *DeploymentRecord_FormMetadata) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeploymentRecord_FormMetadata) GetFormKey() int64 {
	if x != nil {
		return x.FormKey
	}
	return 0
}

func (x *DeploymentRecord_FormMetadata) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeploymentRecord_FormMetadata) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *DeploymentRecord_FormMetadata) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *DeploymentRecord_FormMetadata) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionEvaluationRecord_EvaluatedDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecisionId      string                                     `protobuf:"bytes,1,opt,name=decisionId,proto3" json:"decisionId,omitempty"`
	DecisionName    string                                     `protobuf:"bytes,2,opt,name=decisionName,proto3" json:"decisionName,omitempty"`
	DecisionKey     int64                                      `protobuf:"varint,3,opt,name=decisionKey,proto3" json:"decisionKey,omitempty"`
	DecisionVersion int64                                      `protobuf:"varint,4,opt,name=decisionVersion,proto3" json:"decisionVersion,omitempty"`
	DecisionType    string                                     `protobuf:"bytes,5,opt,name=decisionType,proto3" json:"decisionType,omitempty"`
	DecisionOutput  string                                     `protobuf:"bytes,6,opt,name=decisionOutput,proto3" json:"decisionOutput,omitempty"`
	EvaluatedInputs []*DecisionEvaluationRecord_EvaluatedInput `protobuf:"bytes,7,rep,name=evaluatedInputs,proto3" json:"evaluatedInputs,omitempty"`
	MatchedRules    []*DecisionEvaluationRecord_MatchedRule    `protobuf:"bytes,8,rep,name=matchedRules,proto3" json:"matchedRules,omitempty"`
	TenantId        string                                     `protobuf:"bytes,9,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) Reset() {
	*x = DecisionEvaluationRecord_EvaluatedDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEvaluationRecord_EvaluatedDecision) ProtoMessage() {}

func (x *DecisionEvaluationRecord_EvaluatedDecision) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEvaluationRecord_EvaluatedDecision.ProtoReflect.Descriptor instead.
func (*DecisionEvaluationRecord_EvaluatedDecision) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{23, 0}
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionId() string {
	if x != nil {
		return x.DecisionId
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionName() string {
	if x != nil {
		return x.DecisionName
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionKey() int64 {
	if x != nil {
		return x.DecisionKey
	}
	return 0
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionVersion() int64 {
	if x != nil {
		return x.DecisionVersion
	}
	return 0
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionType() string {
	if x != nil {
		return x.DecisionType
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetDecisionOutput() string {
	if x != nil {
		return x.DecisionOutput
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetEvaluatedInputs() []*DecisionEvaluationRecord_EvaluatedInput {
	if x != nil {
		return x.EvaluatedInputs
	}
	return nil
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetMatchedRules() []*DecisionEvaluationRecord_MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *DecisionEvaluationRecord_EvaluatedDecision) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DecisionEvaluationRecord_MatchedRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId           string                                      `protobuf:"bytes,1,opt,name=ruleId,proto3" json:"ruleId,omitempty"`
	RuleIndex        int32                                       `protobuf:"varint,2,opt,name=ruleIndex,proto3" json:"ruleIndex,omitempty"`
	EvaluatedOutputs []*DecisionEvaluationRecord_EvaluatedOutput `protobuf:"bytes,3,rep,name=evaluatedOutputs,proto3" json:"evaluatedOutputs,omitempty"`
}

func (x *DecisionEvaluationRecord_MatchedRule) Reset() {
	*x = DecisionEvaluationRecord_MatchedRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEvaluationRecord_MatchedRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEvaluationRecord_MatchedRule) ProtoMessage() {}

func (x *DecisionEvaluationRecord_MatchedRule) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEvaluationRecord_MatchedRule.ProtoReflect.Descriptor instead.
func (*DecisionEvaluationRecord_MatchedRule) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{23, 1}
}

func (x *DecisionEvaluationRecord_MatchedRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *DecisionEvaluationRecord_MatchedRule) GetRuleIndex() int32 {
	if x != nil {
		return x.RuleIndex
	}
	return 0
}

func (x *DecisionEvaluationRecord_MatchedRule) GetEvaluatedOutputs() []*DecisionEvaluationRecord_EvaluatedOutput {
	if x != nil {
		return x.EvaluatedOutputs
	}
	return nil
}

type DecisionEvaluationRecord_EvaluatedInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputId    string `protobuf:"bytes,1,opt,name=inputId,proto3" json:"inputId,omitempty"`
	InputName  string `protobuf:"bytes,2,opt,name=inputName,proto3" json:"inputName,omitempty"`
	InputValue string `protobuf:"bytes,3,opt,name=inputValue,proto3" json:"inputValue,omitempty"`
}

func (x *DecisionEvaluationRecord_EvaluatedInput) Reset() {
	*x = DecisionEvaluationRecord_EvaluatedInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEvaluationRecord_EvaluatedInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEvaluationRecord_EvaluatedInput) ProtoMessage() {}

func (x *DecisionEvaluationRecord_EvaluatedInput) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEvaluationRecord_EvaluatedInput.ProtoReflect.Descriptor instead.
func (*DecisionEvaluationRecord_EvaluatedInput) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{23, 2}
}

func (x *DecisionEvaluationRecord_EvaluatedInput) GetInputId() string {
	if x != nil {
		return x.InputId
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedInput) GetInputName() string {
	if x != nil {
		return x.InputName
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedInput) GetInputValue() string {
	if x != nil {
		return x.InputValue
	}
	return ""
}

type DecisionEvaluationRecord_EvaluatedOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputId    string `protobuf:"bytes,1,opt,name=outputId,proto3" json:"outputId,omitempty"`
	OutputName  string `protobuf:"bytes,2,opt,name=outputName,proto3" json:"outputName,omitempty"`
	OutputValue string `protobuf:"bytes,3,opt,name=outputValue,proto3" json:"outputValue,omitempty"`
}

func (x *DecisionEvaluationRecord_EvaluatedOutput) Reset() {
	*x = DecisionEvaluationRecord_EvaluatedOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEvaluationRecord_EvaluatedOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEvaluationRecord_EvaluatedOutput) ProtoMessage() {}

func (x *DecisionEvaluationRecord_EvaluatedOutput) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEvaluationRecord_EvaluatedOutput.ProtoReflect.Descriptor instead.
func (*DecisionEvaluationRecord_EvaluatedOutput) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{23, 3}
}

func (x *DecisionEvaluationRecord_EvaluatedOutput) GetOutputId() string {
	if x != nil {
		return x.OutputId
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedOutput) GetOutputName() string {
	if x != nil {
		return x.OutputName
	}
	return ""
}

func (x *DecisionEvaluationRecord_EvaluatedOutput) GetOutputValue() string {
	if x != nil {
		return x.OutputValue
	}
	return ""
}

type ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementInstanceKey int64 `protobuf:"varint,1,opt,name=elementInstanceKey,proto3" json:"elementInstanceKey,omitempty"`
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) Reset() {
	*x = ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) ProtoMessage() {
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction.ProtoReflect.Descriptor instead.
func (*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction) GetElementInstanceKey() int64 {
	if x != nil {
		return x.ElementInstanceKey
	}
	return 0
}

type ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementId            string                                                                              `protobuf:"bytes,1,opt,name=elementId,proto3" json:"elementId,omitempty"`
	AncestorScopeKey     int64                                                                               `protobuf:"varint,2,opt,name=ancestorScopeKey,proto3" json:"ancestorScopeKey,omitempty"`
	VariableInstructions []*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction `protobuf:"bytes,3,rep,name=variableInstructions,proto3" json:"variableInstructions,omitempty"`
	AncestorScopeKeys    []int64                                                                             `protobuf:"varint,4,rep,packed,name=ancestorScopeKeys,proto3" json:"ancestorScopeKeys,omitempty"`
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) Reset() {
	*x = ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) ProtoMessage() {
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction.ProtoReflect.Descriptor instead.
func (*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{24, 1}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) GetAncestorScopeKey() int64 {
	if x != nil {
		return x.AncestorScopeKey
	}
	return 0
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) GetVariableInstructions() []*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction {
	if x != nil {
		return x.VariableInstructions
	}
	return nil
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction) GetAncestorScopeKeys() []int64 {
	if x != nil {
		return x.AncestorScopeKeys
	}
	return nil
}

type ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables *structpb.Struct `protobuf:"bytes,1,opt,name=variables,proto3" json:"variables,omitempty"`
	ElementId string           `protobuf:"bytes,2,opt,name=elementId,proto3" json:"elementId,omitempty"`
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) Reset() {
	*x = ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_server_schema_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) ProtoMessage() {
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_internal_server_schema_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction.ProtoReflect.Descriptor instead.
func (*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) Descriptor() ([]byte, []int) {
	return file_internal_server_schema_proto_rawDescGZIP(), []int{24, 2}
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) GetVariables() *structpb.Struct {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction) GetElementId() string {
	if x != nil {
		return x.ElementId
	}
	return ""
}

var File_internal_server_schema_proto protoreflect.FileDescriptor

var file_internal_server_schema_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x80, 0x0a, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0xf4, 0x05, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f, 0x42, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x4a, 0x4f, 0x42, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x43, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x16, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x4c, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x1f,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x21, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x22, 0x22, 0x54, 0x0a, 0x0a, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22,
	0xb7, 0x0b, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x73,
	0x0a, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x83, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xc2, 0x02, 0x0a, 0x10, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xd8,
	0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xc9, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a,
	0x6f, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xf8, 0x04, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x02, 0x0a,
	0x0e, 0x4a, 0x6f, 0x62, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x54,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x19, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xcf, 0x03, 0x0a, 0x23, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x63, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49,
	0x43, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0xa0,
	0x04, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xd5, 0x02, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xea, 0x03, 0x0a, 0x20, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x1c, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x1b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x1c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xa9, 0x0d, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x1a, 0xce, 0x03, 0x0a, 0x11, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x64, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x1a, 0xac, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x67, 0x0a, 0x10, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x1a, 0x68, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6f, 0x0a, 0x0f, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x08, 0x0a,
	0x21, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x97,
	0x01, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x1a, 0x61, 0x0a, 0x2f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0xc2, 0x02, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x85, 0x01, 0x0a,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdb,
	0x07, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x70, 0x6d, 0x6e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x70, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xae, 0x05, 0x0a,
	0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x6f,
	0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x68, 0x72, 0x6f,
	0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x46,
	0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xf9, 0x01,
	0x0a, 0x10, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72,
	0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x53, 0x0a, 0x17, 0x69, 0x6f, 0x2e,
	0x7a, 0x65, 0x65, 0x62, 0x65, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x62, 0x6f, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x2f, 0x72, 0x65, 0x61,
	0x64, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_server_schema_proto_rawDescOnce sync.Once
	file_internal_server_schema_proto_rawDescData = file_internal_server_schema_proto_rawDesc
)

func file_internal_server_schema_proto_rawDescGZIP() []byte {
	file_internal_server_schema_proto_rawDescOnce.Do(func() {
		file_internal_server_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_server_schema_proto_rawDescData)
	})
	return file_internal_server_schema_proto_rawDescData
}

var file_internal_server_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_internal_server_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_internal_server_schema_proto_goTypes = []any{
	(RecordMetadata_ValueType)(0),                      // 0: exporter_protocol.RecordMetadata.ValueType
	(RecordMetadata_RecordType)(0),                     // 1: exporter_protocol.RecordMetadata.RecordType
	(VariableDocumentRecord_UpdateSemantics)(0),        // 2: exporter_protocol.VariableDocumentRecord.UpdateSemantics
	(*RecordId)(nil),                                   // 3: exporter_protocol.RecordId
	(*Record)(nil),                                     // 4: exporter_protocol.Record
	(*RecordMetadata)(nil),                             // 5: exporter_protocol.RecordMetadata
	(*DeploymentRecord)(nil),                           // 6: exporter_protocol.DeploymentRecord
	(*DeploymentDistributionRecord)(nil),               // 7: exporter_protocol.DeploymentDistributionRecord
	(*ErrorRecord)(nil),                                // 8: exporter_protocol.ErrorRecord
	(*IncidentRecord)(nil),                             // 9: exporter_protocol.IncidentRecord
	(*JobRecord)(nil),                                  // 10: exporter_protocol.JobRecord
	(*JobBatchRecord)(nil),                             // 11: exporter_protocol.JobBatchRecord
	(*MessageRecord)(nil),                              // 12: exporter_protocol.MessageRecord
	(*MessageSubscriptionRecord)(nil),                  // 13: exporter_protocol.MessageSubscriptionRecord
	(*MessageStartEventSubscriptionRecord)(nil),        // 14: exporter_protocol.MessageStartEventSubscriptionRecord
	(*TimerRecord)(nil),                                // 15: exporter_protocol.TimerRecord
	(*VariableRecord)(nil),                             // 16: exporter_protocol.VariableRecord
	(*VariableDocumentRecord)(nil),                     // 17: exporter_protocol.VariableDocumentRecord
	(*ProcessInstanceRecord)(nil),                      // 18: exporter_protocol.ProcessInstanceRecord
	(*ProcessInstanceCreationRecord)(nil),              // 19: exporter_protocol.ProcessInstanceCreationRecord
	(*ProcessMessageSubscriptionRecord)(nil),           // 20: exporter_protocol.ProcessMessageSubscriptionRecord
	(*ProcessRecord)(nil),                              // 21: exporter_protocol.ProcessRecord
	(*ProcessEventRecord)(nil),                         // 22: exporter_protocol.ProcessEventRecord
	(*DecisionRecord)(nil),                             // 23: exporter_protocol.DecisionRecord
	(*DecisionRequirementsMetadata)(nil),               // 24: exporter_protocol.DecisionRequirementsMetadata
	(*DecisionRequirementsRecord)(nil),                 // 25: exporter_protocol.DecisionRequirementsRecord
	(*DecisionEvaluationRecord)(nil),                   // 26: exporter_protocol.DecisionEvaluationRecord
	(*ProcessInstanceModificationRecord)(nil),          // 27: exporter_protocol.ProcessInstanceModificationRecord
	(*CheckpointRecord)(nil),                           // 28: exporter_protocol.CheckpointRecord
	(*SignalRecord)(nil),                               // 29: exporter_protocol.SignalRecord
	(*SignalSubscriptionRecord)(nil),                   // 30: exporter_protocol.SignalSubscriptionRecord
	(*FormRecord)(nil),                                 // 31: exporter_protocol.FormRecord
	(*ResourceDeletionRecord)(nil),                     // 32: exporter_protocol.ResourceDeletionRecord
	(*UserTaskRecord)(nil),                             // 33: exporter_protocol.UserTaskRecord
	(*CompensationSubscriptionRecord)(nil),             // 34: exporter_protocol.CompensationSubscriptionRecord
	(*EscalationRecord)(nil),                           // 35: exporter_protocol.EscalationRecord
	(*DeploymentRecord_Resource)(nil),                  // 36: exporter_protocol.DeploymentRecord.Resource
	(*DeploymentRecord_ProcessMetadata)(nil),           // 37: exporter_protocol.DeploymentRecord.ProcessMetadata
	(*DeploymentRecord_DecisionMetadata)(nil),          // 38: exporter_protocol.DeploymentRecord.DecisionMetadata
	(*DeploymentRecord_FormMetadata)(nil),              // 39: exporter_protocol.DeploymentRecord.FormMetadata
	(*DecisionEvaluationRecord_EvaluatedDecision)(nil), // 40: exporter_protocol.DecisionEvaluationRecord.EvaluatedDecision
	(*DecisionEvaluationRecord_MatchedRule)(nil),       // 41: exporter_protocol.DecisionEvaluationRecord.MatchedRule
	(*DecisionEvaluationRecord_EvaluatedInput)(nil),    // 42: exporter_protocol.DecisionEvaluationRecord.EvaluatedInput
	(*DecisionEvaluationRecord_EvaluatedOutput)(nil),   // 43: exporter_protocol.DecisionEvaluationRecord.EvaluatedOutput
	(*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction)(nil), // 44: exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationTerminateInstruction
	(*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction)(nil),  // 45: exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationActivateInstruction
	(*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction)(nil),  // 46: exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationVariableInstruction
	(*anypb.Any)(nil),       // 47: google.protobuf.Any
	(*structpb.Struct)(nil), // 48: google.protobuf.Struct
}
var file_internal_server_schema_proto_depIdxs = []int32{
	47, // 0: exporter_protocol.Record.record:type_name -> google.protobuf.Any
	1,  // 1: exporter_protocol.RecordMetadata.recordType:type_name -> exporter_protocol.RecordMetadata.RecordType
	0,  // 2: exporter_protocol.RecordMetadata.valueType:type_name -> exporter_protocol.RecordMetadata.ValueType
	5,  // 3: exporter_protocol.DeploymentRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	36, // 4: exporter_protocol.DeploymentRecord.resources:type_name -> exporter_protocol.DeploymentRecord.Resource
	37, // 5: exporter_protocol.DeploymentRecord.processMetadata:type_name -> exporter_protocol.DeploymentRecord.ProcessMetadata
	24, // 6: exporter_protocol.DeploymentRecord.decisionRequirementsMetadata:type_name -> exporter_protocol.DecisionRequirementsMetadata
	38, // 7: exporter_protocol.DeploymentRecord.decisionMetadata:type_name -> exporter_protocol.DeploymentRecord.DecisionMetadata
	39, // 8: exporter_protocol.DeploymentRecord.formMetadata:type_name -> exporter_protocol.DeploymentRecord.FormMetadata
	5,  // 9: exporter_protocol.DeploymentDistributionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 10: exporter_protocol.ErrorRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 11: exporter_protocol.IncidentRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 12: exporter_protocol.JobRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 13: exporter_protocol.JobRecord.customHeaders:type_name -> google.protobuf.Struct
	48, // 14: exporter_protocol.JobRecord.variables:type_name -> google.protobuf.Struct
	5,  // 15: exporter_protocol.JobBatchRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	10, // 16: exporter_protocol.JobBatchRecord.jobs:type_name -> exporter_protocol.JobRecord
	5,  // 17: exporter_protocol.MessageRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 18: exporter_protocol.MessageRecord.variables:type_name -> google.protobuf.Struct
	5,  // 19: exporter_protocol.MessageSubscriptionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 20: exporter_protocol.MessageSubscriptionRecord.variables:type_name -> google.protobuf.Struct
	5,  // 21: exporter_protocol.MessageStartEventSubscriptionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 22: exporter_protocol.MessageStartEventSubscriptionRecord.variables:type_name -> google.protobuf.Struct
	5,  // 23: exporter_protocol.TimerRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 24: exporter_protocol.VariableRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 25: exporter_protocol.VariableDocumentRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	2,  // 26: exporter_protocol.VariableDocumentRecord.updateSemantics:type_name -> exporter_protocol.VariableDocumentRecord.UpdateSemantics
	48, // 27: exporter_protocol.VariableDocumentRecord.variables:type_name -> google.protobuf.Struct
	5,  // 28: exporter_protocol.ProcessInstanceRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 29: exporter_protocol.ProcessInstanceCreationRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 30: exporter_protocol.ProcessInstanceCreationRecord.variables:type_name -> google.protobuf.Struct
	5,  // 31: exporter_protocol.ProcessMessageSubscriptionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 32: exporter_protocol.ProcessMessageSubscriptionRecord.variables:type_name -> google.protobuf.Struct
	5,  // 33: exporter_protocol.ProcessRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 34: exporter_protocol.ProcessEventRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 35: exporter_protocol.ProcessEventRecord.variables:type_name -> google.protobuf.Struct
	5,  // 36: exporter_protocol.DecisionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 37: exporter_protocol.DecisionRequirementsRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	24, // 38: exporter_protocol.DecisionRequirementsRecord.decisionRequirementsMetadata:type_name -> exporter_protocol.DecisionRequirementsMetadata
	5,  // 39: exporter_protocol.DecisionEvaluationRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	40, // 40: exporter_protocol.DecisionEvaluationRecord.evaluatedDecisions:type_name -> exporter_protocol.DecisionEvaluationRecord.EvaluatedDecision
	5,  // 41: exporter_protocol.ProcessInstanceModificationRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	44, // 42: exporter_protocol.ProcessInstanceModificationRecord.terminateInstructions:type_name -> exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationTerminateInstruction
	45, // 43: exporter_protocol.ProcessInstanceModificationRecord.activateInstructions:type_name -> exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationActivateInstruction
	5,  // 44: exporter_protocol.CheckpointRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 45: exporter_protocol.SignalRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 46: exporter_protocol.SignalRecord.variables:type_name -> google.protobuf.Struct
	5,  // 47: exporter_protocol.SignalSubscriptionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 48: exporter_protocol.FormRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 49: exporter_protocol.ResourceDeletionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	5,  // 50: exporter_protocol.UserTaskRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 51: exporter_protocol.UserTaskRecord.variables:type_name -> google.protobuf.Struct
	48, // 52: exporter_protocol.UserTaskRecord.customHeaders:type_name -> google.protobuf.Struct
	5,  // 53: exporter_protocol.CompensationSubscriptionRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	48, // 54: exporter_protocol.CompensationSubscriptionRecord.variables:type_name -> google.protobuf.Struct
	5,  // 55: exporter_protocol.EscalationRecord.metadata:type_name -> exporter_protocol.RecordMetadata
	42, // 56: exporter_protocol.DecisionEvaluationRecord.EvaluatedDecision.evaluatedInputs:type_name -> exporter_protocol.DecisionEvaluationRecord.EvaluatedInput
	41, // 57: exporter_protocol.DecisionEvaluationRecord.EvaluatedDecision.matchedRules:type_name -> exporter_protocol.DecisionEvaluationRecord.MatchedRule
	43, // 58: exporter_protocol.DecisionEvaluationRecord.MatchedRule.evaluatedOutputs:type_name -> exporter_protocol.DecisionEvaluationRecord.EvaluatedOutput
	46, // 59: exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationActivateInstruction.variableInstructions:type_name -> exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationVariableInstruction
	48, // 60: exporter_protocol.ProcessInstanceModificationRecord.ProcessInstanceModificationVariableInstruction.variables:type_name -> google.protobuf.Struct
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_internal_server_schema_proto_init() }
func file_internal_server_schema_proto_init() {
	if File_internal_server_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_server_schema_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RecordId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RecordMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentDistributionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*IncidentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*JobRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*JobBatchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MessageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MessageSubscriptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MessageStartEventSubscriptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TimerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*VariableRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*VariableDocumentRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceCreationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessMessageSubscriptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessEventRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionRequirementsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionRequirementsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEvaluationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceModificationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CheckpointRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SignalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SignalSubscriptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*FormRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceDeletionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*UserTaskRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CompensationSubscriptionRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*EscalationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRecord_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRecord_ProcessMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRecord_DecisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentRecord_FormMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEvaluationRecord_EvaluatedDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEvaluationRecord_MatchedRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEvaluationRecord_EvaluatedInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEvaluationRecord_EvaluatedOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceModificationRecord_ProcessInstanceModificationTerminateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceModificationRecord_ProcessInstanceModificationActivateInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_server_schema_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessInstanceModificationRecord_ProcessInstanceModificationVariableInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_server_schema_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_server_schema_proto_goTypes,
		DependencyIndexes: file_internal_server_schema_proto_depIdxs,
		EnumInfos:         file_internal_server_schema_proto_enumTypes,
		MessageInfos:      file_internal_server_schema_proto_msgTypes,
	}.Build()
	File_internal_server_schema_proto = out.File
	file_internal_server_schema_proto_rawDesc = nil
	file_internal_server_schema_proto_goTypes = nil
	file_internal_server_schema_proto_depIdxs = nil
}
